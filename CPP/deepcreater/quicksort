#include <iostream>
#include <stack>
#include <vector>

using namespace std;

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) 
    {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quicksort(vector<int>& arr, int low, int high) {
    stack<pair<int, int>> stk;

    stk.push({low, high});
int l,h;
    while (!stk.empty()) 
    {
        pair<int, int> range = stk.top();
        stk.pop();

         l = range.first;
         h = range.second;
   

        int piv_loc = partition(arr, l, h);

        if (piv_loc - 1 > l) {
            stk.push({l, piv_loc - 1});
        }
        cout<<endl;

        if (piv_loc + 1 < h) {
            stk.push({piv_loc + 1, h});
        }
    }
}

void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

int main() {
    vector<int> arr = {10, 7, 8, 9, 1, 5};
    int n = arr.size();
   

    cout << "Original array: ";
    printArray(arr);

    quicksort(arr, 0, n - 1);

    cout << "Sorted array: ";
    printArray(arr);
        

    return 0;
}
